<data-definition>
    <enum-type type-name='art_image_element_type'>
        <enum-item name="CREATURE"/>
        <enum-item name="PLANT"/>
        <enum-item name="TREE"/>
        <enum-item name="SHAPE"/>
        <enum-item name="ITEM"/>
    </enum-type>

    <class-type type-name='art_image_element'  original-name='art_image_elementst'>
        <int32_t name='count'/>
        <virtual-methods>
            <vmethod name='write_file'> <pointer name='file' type-name='file_compressorst'/> </vmethod>
            <vmethod name='read_file'>
                <pointer name='file' type-name='file_compressorst'/>
                <int32_t name='loadversion'/>
            </vmethod>
            <vmethod ret-type='art_image_element_type' name='getType'/>
            <vmethod name='setID'> <int32_t name='ID' comment='race, item type, plant ID, or shape ID'/> </vmethod>
            <vmethod is-destructor='true'/>

            <vmethod name='clone'>
                <ret-type><pointer type-name='art_image_element'/></ret-type>
            </vmethod>
            <vmethod name='getSymbol'>
                <pointer type-name='int8_t' name='sym'/>
                <pointer type-name='int32_t'/>
            </vmethod>
            <vmethod name='getName1'>
                <pointer type-name='stl-string' name='name'/>
                <bool name='useThe'/>
                <bool name='useName'/>
            </vmethod>
            <vmethod name='getName2'> seems to return like getName1 but with useName true
                <pointer type-name='stl-string' name='name'/>
                <pointer/>
            </vmethod>
            <vmethod/>

            <vmethod name='getColorAndShape'>
                <pointer name='colors'><stl-vector type-name='int16_t'/></pointer>
                <pointer name='shapes'><stl-vector type-name='int16_t'/></pointer>
            </vmethod>
        </virtual-methods>
    </class-type>

    <class-type type-name='art_image_element_creaturest' inherits-from='art_image_element'>
        <int32_t name='race' ref-target='creature_raw'/>
        <int16_t name='caste'/>
        <int32_t name='histfig' ref-target='historical_figure'/>
    </class-type>

    <class-type type-name='art_image_element_plantst' inherits-from='art_image_element'>
        <int32_t name='plant_id' ref-target='plant_raw'/>
    </class-type>

    <class-type type-name='art_image_element_treest' inherits-from='art_image_element'>
        <int32_t name='plant_id' ref-target='plant_raw'/>
    </class-type>

    <class-type type-name='art_image_element_shapest' inherits-from='art_image_element'>
        <int32_t name='shape_id' ref-target='descriptor_shape'/>
        <int16_t/>
    </class-type>

    <class-type type-name='art_image_element_itemst' inherits-from='art_image_element'>
        <enum base-type='int16_t' name='item_type' type-name='item_type'/>
        <int16_t name='item_subtype' refers-to='(item-subtype-target $$._parent.item_type $)'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int16_t name='mat_index'/>
        <bitfield name='flags' type-name='item_flags'/>
        <int32_t name='item_id' ref-target='item'/>
    </class-type>

    <enum-type type-name='art_image_property_type'>
        <enum-item name="transitive_verb"/>
        <enum-item name="intransitive_verb"/>
    </enum-type>

    <class-type type-name='art_image_property'  original-name='art_image_propertyst'>
        <df-flagarray name='flags'/>
        <virtual-methods>
            <vmethod name='write_file'> <pointer name='file' type-name='file_compressorst'/> </vmethod>
            <vmethod name='read_file'>
                <pointer name='file' type-name='file_compressorst'/>
                <int32_t name='loadversion'/>
            </vmethod>
            <vmethod ret-type='art_image_property_type' name='getType'/>
            <vmethod is-destructor='true'/>
            <vmethod name='clone'>
                <ret-type><pointer type-name='art_image_element'/></ret-type>
            </vmethod>

            <vmethod name='getName'>
                <pointer type-name='stl-string'/>
                <pointer/>
                <pointer/>
            </vmethod>
        </virtual-methods>
    </class-type>

    <enum-type type-name='art_image_property_verb' base-type='int16_t'>
        <enum-item name='Withering'/>
        <enum-item name='SurroundedBy'/>
        <enum-item name='Massacring'/>
        <enum-item name='Fighting'/>
        <enum-item name='Laboring'/>
        <enum-item name='Greeting'/>
        <enum-item name='Refusing'/>
        <enum-item name='Speaking'/>
        <enum-item name='Embracing'/>
        <enum-item name='StrikingDown'/>
        <enum-item name='MenacingPose'/>
        <enum-item name='Traveling'/>
        <enum-item name='Raising'/>
        <enum-item name='Hiding'/>
        <enum-item name='LookingConfused'/>
        <enum-item name='LookingTerrified'/>
        <enum-item name='Devouring'/>
        <enum-item name='Admiring'/>
        <enum-item name='Burning'/>
        <enum-item name='Weeping'/>
        <enum-item name='LookingDejected'/>
        <enum-item name='Cringing'/>
        <enum-item name='Screaming'/>
        <enum-item name='SubmissiveGesture'/>
        <enum-item name='FetalPosition'/>
        <enum-item name='SmearedIntoSpiral'/>
        <enum-item name='Falling'/>
        <enum-item name='Dead'/>
        <enum-item name='Laughing'/>
        <enum-item name='LookingOffended'/>
        <enum-item name='BeingShot'/>
        <enum-item name='PlaintiveGesture'/>
        <enum-item name='Melting'/>
        <enum-item name='Shooting'/>
        <enum-item name='Torturing'/>
        <enum-item name='CommittingDepravedAct'/>
        <enum-item name='Praying'/>
        <enum-item name='Contemplating'/>
        <enum-item name='Cooking'/>
        <enum-item name='Engraving'/>
        <enum-item name='Prostrating'/>
        <enum-item name='Suffering'/>
        <enum-item name='BeingImpaled'/>
        <enum-item name='BeingContorted'/>
        <enum-item name='BeingFlayed'/>
        <enum-item name='HangingFrom'/>
        <enum-item name='BeingMutilated'/>
        <enum-item name='TriumphantPose'/>
    </enum-type>

    <class-type type-name='art_image_property_transitive_verbst' inherits-from='art_image_property'>
        <int32_t name='subject'/>
        <int32_t name='object'/>
        <enum base-type='int16_t' name="verb" type-name='art_image_property_verb'/>
    </class-type>

    <class-type type-name='art_image_property_intransitive_verbst' inherits-from='art_image_property'>
        <int32_t name='subject'/>
        <enum base-type='int16_t' name="verb" type-name='art_image_property_verb'/>
    </class-type>

    <enum-type type-name='art_facet_type'>
        <enum-item name="OWN_RACE"/>
        <enum-item name="FANCIFUL"/>
        <enum-item name="GOOD"/>
        <enum-item name="EVIL"/>
    </enum-type>

    <struct-type type-name='art_image'>
        <code-helper name='find-instance'>$(find-instance $art_image_chunk $$).images[$]</code-helper>
        <code-helper name='describe'>(describe-obj $.name)</code-helper>

        <stl-vector name='elements' pointer-type='art_image_element'/>
        <stl-vector name='properties' pointer-type='art_image_property'/>

        <int32_t name='event' ref-target='history_event'/>
        <compound name='name' type-name='language_name'/>
        <enum base-type='int32_t' name='spec_ref_type' type-name='specific_ref_type'/>
        <int16_t name='mat_type' ref-target='material' aux-value='$$.mat_index'/>
        <int32_t name='mat_index'/>
        <enum base-type='int16_t' name='quality' type-name='item_quality'/>
        <int32_t name='artist' ref-target='historical_figure'/>
        <int32_t name='site' ref-target='world_site'/>
        <pointer type-name='general_ref'/>
        <int32_t name='year'/>
        <int32_t/>
        <int32_t name='id' ref-target='art_image_chunk'/>
        <int16_t name='subid' ref-target='art_image' aux-value='$$.id'/>
    </struct-type>

    <struct-type type-name='art_image_chunk'
                 instance-vector='$global.world.art_image_chunks' key-field='id'>
        <int32_t name='id' comment='art_image_*.dat'/>
        <static-array name='images' count='500'>
            <pointer type-name='art_image'/>
        </static-array>
    </struct-type>

    <struct-type type-name='art_image_ref'>
        <int32_t name='id' ref-target='art_image_chunk'/>
        <int16_t name='subid' ref-target='art_image' aux-value='$$.id'/>
        <int32_t name='civ_id' ref-target='historical_entity' since='v0.34.01'/>
        <int32_t name='site_id' ref-target='world_site' since='v0.34.01'/>
    </struct-type>

    <enum-type type-name='poetic_form_action' base-type='int32_t'>
        <enum-item name='Describe'/>
        <enum-item name='Satirize'/>
        <enum-item name='AmuseAudience'/>
        <enum-item name='Complain'/>
        <enum-item name='Renounce'/>
        <enum-item name='MakeApology'/>
        <enum-item name='ExpressPleasure'/>
        <enum-item name='ExpressGrief'/>
        <enum-item name='Praise'/>
        <enum-item name='TeachMoralLesson'/>
        <enum-item name='MakeAssertion'/>
        <enum-item name='MakeCounterAssertion'/>
        <enum-item name='MakeConsession'/>
        <enum-item name='SynthesizePreviousIdeas'/>
        <enum-item name='DevelopPreviousIdea'/>
        <enum-item name='InvertTheAssertion'/>
        <enum-item name='UndercutAssertion'/>
        <enum-item name='MoveAwayFromPreviousIdeas'/>
        <enum-item name='ReflectPreviousIdeas'/>
        <enum-item name='ConsoleAudience'/>
        <enum-item name='RefuseConsolation'/>
        <enum-item name='OfferDifferentPerspective'/>
        <enum-item name='Beseech' since='v0.47.01'/>
    </enum-type>

    A - even, B - uneven for tone patterns, A - unstressed, B - stressed for accent patterns
    <enum-type type-name='poetic_form_pattern' base-type='int32_t'>
        <enum-item name='AA'/>
        <enum-item name='AB'/>
        <enum-item name='BA'/>
        <enum-item name='BB'/>
        <enum-item name='AAA'/>
        <enum-item name='BAA'/>
        <enum-item name='ABA'/>
        <enum-item name='AAB'/>
        <enum-item name='ABB'/>
        <enum-item name='BBA'/>
        <enum-item name='BAB'/>
        <enum-item name='BBB'/>
    </enum-type>

    <enum-type type-name='poetic_form_caesura_position' base-type='int32_t'>
        <enum-item name='Initial'/>
        <enum-item name='Medial'/>
        <enum-item name='Terminal'/>
    </enum-type>

    <enum-type type-name='poetic_form_mood' base-type='int32_t'>
        <enum-item name='Narrative'/>
        <enum-item name='Dramatic'/>
        <enum-item name='Reflective'/>
        <enum-item name='Riddle'/>
        <enum-item name='Ribald'/>
        <enum-item name='Light'/>
        <enum-item name='Solemn'/>
    </enum-type>

    <enum-type type-name='poetic_form_subject' base-type='int32_t'>
        <enum-item name='None' value='-1'/> "a chosen subject"
        <enum-item name='Past'/>
        <enum-item name='CurrentEvents'/>
        <enum-item name='Future'/>
        <enum-item name='SomeoneRecentlyDeceased'/>
        <enum-item name='SomeoneRecentlyRetired'/>
        <enum-item name='Religion'/>
        <enum-item name='SpecificPlace'/>
        <enum-item name='SpecificWildernessRegion'/>
        <enum-item name='Nature'/>
        <enum-item name='Lover'/>
        <enum-item name='Family'/>
        <enum-item name='AlcoholicBeverages'/>
        <enum-item name='Journey'/>
        <enum-item name='War'/>
        <enum-item name='Hunt'/>
        <enum-item name='Mining'/>
        <enum-item name='Death'/>
        <enum-item name='Immortality'/>
        <enum-item name='SomeonesCharacter'/>
        <enum-item name='Histfig'/> "a historical figure" or a specific figure
        <enum-item name='Concept'/> "an abstract concept" or a specific concept
    </enum-type>

    <bitfield-type type-name="poetic_form_feature" base-type="uint32_t">
        <flag-bit name="InternalRhyme"/>
        <flag-bit name="EndRhymesDontMatch"/>
        <flag-bit name="Alliteration"/>
        <flag-bit name="Onomatopoeia"/>
        <flag-bit name="antanaclasis"/>
        <flag-bit name="DifferentReadings"/> "different readings depending on word breaks"
        <flag-bit name="ReadBackwards"/> "can be read backwards as well as forwards"
        <flag-bit name="ReadOrthogonally"/> "can be read orthogonally across the standard lines"
        <flag-bit name="Emerge"/> "emerge when reading along certain prescribed paths across the body of the poem"
        <flag-bit name="Assonance"/>
        <flag-bit name="Consonance"/>
        <flag-bit name="Elision"/>
        <flag-bit name="Epenthesis"/>
        <flag-bit name="Synchysis"/>
        <flag-bit name="Allegory"/>
        <flag-bit name="Ambiguity"/>
        <flag-bit name="Symbolism"/>
        <flag-bit name="Metaphor"/>
        <flag-bit name="Simile"/>
        <flag-bit name="Metonymy"/>
        <flag-bit name="VividImagery"/>
        <flag-bit name="Juxtaposision"/>
    </bitfield-type>

    <enum-type type-name='poetic_form_additional_feature' base-type='int32_t'>
        <enum-item name='SharesUnderlyingMeaning'/>
        <enum-item name='ContrastsUnderlyingMeaning'/>
        <enum-item name='RequiredToMaintainPhrasing'/>
        <enum-item name='SameGrammaticalStructure'/>
        <enum-item name='SamePlacementOfAllusions'/>
        <enum-item name='ReverseWordOrder'/>
        <enum-item name='ReverseGrammaticalStructure'/>
        <enum-item name='PresentsDifferentView'/>
        <enum-item name='MustExpandIdea'/>
    </enum-type>

    <struct-type type-name='poetic_form' instance-vector='$global.world.poetic_forms.all' key-field='id'>
        <int32_t name='id'/>
        <compound name='name' type-name='language_name'/>
        <int32_t name='originating_entity' ref-target='historical_entity'/> "originating in ..."
        <int32_t name='original_author' ref-target='historical_figure'/> "originally devised by ..."
        <int32_t/>

        <bitfield base-type='uint32_t' name='flags'>
            <flag-bit name='tone_patterns'/> patterns will be tone patterns if set, otherwise accent patterns
            <flag-bit name='produces_individual_poems'/> 'applied by poets to produce individual poems' if set,  otherwise 'guides poets during improvised performances'
        </bitfield>

        <stl-vector name='parts' pointer-type='poetic_form_part'/>
        <int32_t name='each_line_feet'/>
        <enum name='each_line_pattern' base-type='int32_t' type-name='poetic_form_pattern'/>

        <enum name='every_line_caesura_position' base-type='int32_t' type-name='poetic_form_caesura_position'/>

        "certain lines often ... and they sometimes ..."
        <stl-vector name='common_features'>
            <enum base-type='int32_t' type-name='poetic_form_additional_feature'/>
        </stl-vector>

        "is a narrative/... poetic form"
        <enum name='mood' base-type='int32_t' type-name='poetic_form_mood'/>
        <enum name='subject' base-type='int32_t' type-name='poetic_form_subject'/>
        <compound is-union='true'>
            <int32_t name='subject_histfig' ref-target='historical_figure'/> for Histfig subject
            <enum name='subject_topic' base-type='int32_t' type-name='sphere_type'/> for Concept subject
        </compound>

        <enum name='action' base-type='int32_t' type-name='poetic_form_action'/>

        <int32_t name='preferred_perspective' comment='if not -1, ALWAYS written from that perspective'/>

        "use of ... is characteristic of the form" or "must feature lines which ..."
        <bitfield name='features' type-name='poetic_form_feature'/>

        <stl-vector name='perspectives' pointer-type='poetic_form_perspective'/>
    </struct-type>

    <struct-type type-name='poetic_form_part'>
        <bitfield base-type='uint32_t' name='flags'>
            <flag-bit name='size_in_lines'/> "line, couplet, tercet" if set, "brief verse paragraphs"/"full verse paragraphs" otherwise
        </bitfield>

        "has X to Y couplets/..."
        <int32_t name='count_min'/>
        <int32_t name='count_max'/>

        size_in_lines is set: line, couplet, tercet, quatrain, quintain, etc.
        size_in_lines is not set: "brief verse" if less than 6, otherwise "full verse"
        <int32_t name='size'/>

        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector name='line_endings' type-name='int32_t'/>
        <stl-vector name='line_feet' type-name='int32_t'/> "the Nth line has XX feet"
        <stl-vector name='line_patterns'>
            <enum base-type='int32_t' type-name='poetic_form_pattern'/>
        </stl-vector>

        <stl-vector name='line_caesura_positions'>
            <enum base-type='int32_t' type-name='poetic_form_caesura_position'/>
        </stl-vector>

        "first line must make use of ..."
        <stl-vector name='line_features'>
            <bitfield type-name='poetic_form_feature'/>
        </stl-vector>

        "The XX line ZZ of ... on YY line"
        <stl-vector name='additional_features'> ZZ
            <enum base-type='int32_t' type-name='poetic_form_additional_feature'/>
        </stl-vector>
        <stl-vector name='additional_targets' type-name='int32_t'/> YY
        <stl-vector name='additional_lines' type-name='int32_t'/> XX

        <stl-vector name='line_moods'>
            <enum base-type='int32_t' type-name='poetic_form_mood'/>
        </stl-vector>
        <stl-vector name='line_subjects'>
            <enum base-type='int32_t' type-name='poetic_form_subject'/>
        </stl-vector>
        <stl-vector name='line_subject_targets'>
            <compound is-union='true'>
                <int32_t name='subject_histfig' ref-target='historical_figure'/> for Histfig subjects
                <enum name='subject_topic' base-type='int32_t' type-name='sphere_type'/> for Concept subjects
            </compound>
        </stl-vector>
        <stl-vector name='line_actions'>
            <enum base-type='int32_t' type-name='poetic_form_action'/>
        </stl-vector>
        <stl-vector type-name='int32_t'/>

        <int32_t name='some_lines_syllables'/> "it has lines with ... syllables"
        <int32_t name='some_lines_pattern'/> "it has lines with a tone/accent pattern of ..."

        "it has ... caesura in each line"
        <enum name='each_line_caesura_position' base-type='int32_t' type-name='poetic_form_caesura_position'/>

        "certain lines have ..." same as additional_features above
        <stl-vector name='certain_lines_additional_features'>
            <enum base-type='int32_t' type-name='poetic_form_additional_feature'/>
        </stl-vector>

        <enum name='mood' base-type='int32_t' type-name='poetic_form_mood'/>
        <int32_t/>
        <int32_t/>
        <enum name='action' base-type='int32_t' type-name='poetic_form_action'/>
        <int32_t/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='poetic_form_perspective'>
        "written from the perspective of ..."
        <enum name='type' base-type='int32_t'>
            <enum-item name='Author'/>
            <enum-item name='Soldier'/>
            <enum-item name='Traveller'/>
            <enum-item name='RelativeOfAuthor'/>
            <enum-item name='PartyOfDebate'/>
            <enum-item name='FictionalPoet'/>
            <enum-item name='Histfig'/>
            <enum-item name='Animal'/>
        </enum>
        <int32_t name='histfig' ref-target='historical_figure'/>
        <int32_t/>
    </struct-type>

    <enum-type type-name='musical_form_purpose' base-type='int32_t'>
        <enum-item name='Entertainment'/>
        <enum-item name='Commemoration'/>
        <enum-item name='Devotion'/>
        <enum-item name='Military'/>
    </enum-type>

    <enum-type type-name='musical_form_style' base-type='int32_t'>
        <enum-item name='None' value='-1'/>

        -- tempo styles
        <enum-item name='FreeTempo'/>
        <enum-item name='VerySlow'/>
        <enum-item name='Slow'/>
        <enum-item name='WalkingPace'/>
        <enum-item name='ModeratelyPaced'/>
        <enum-item name='ModeratelyFast'/>
        <enum-item name='Fast'/>
        <enum-item name='VeryFast'/>
        <enum-item name='ExtremelyFast'/>
        <enum-item/>

        <enum-item/>
        <enum-item/>
        <enum-item/>
        <enum-item/>
        <enum-item/>
        <enum-item name='Accelerates'/>
        <enum-item name='SlowsAndBroadens'/>
        <enum-item name='ConsistentlySlowing'/>
        <enum-item name='HurriedPace'/>
        <enum-item name='GraduallySlowsAtEnd'/>

        -- dynamic styles
        <enum-item name='WhisperedUndertones'/>
        <enum-item name='VerySoft'/>
        <enum-item name='Soft'/>
        <enum-item name='ModeratelySoft'/>
        <enum-item name='ModeratelyLoud'/>
        <enum-item name='Loud'/>
        <enum-item name='VeryLoud'/>
        <enum-item name='BecomeLouderAndLouder'/>
        <enum-item name='BecomeSofterAndSofter'/>
        <enum-item name='FadeIntoSilence'/>

        <enum-item name='StartLoudThenImmediatelySoft'/>
        -- more tempo styles
        <enum-item name='SlowsAndDiesAwayAtEnd'/>
        <enum-item name='BecomesCalmerAtEnd'/>
        <enum-item name='BecomesFrenzied'/>
        -- overall styles
        <enum-item name='StressRhythm'/>
        <enum-item name='BeStately'/>
        <enum-item name='BeBright'/>
        <enum-item name='BeLively'/>
        <enum-item name='BeSkilled'/>
        <enum-item name='BeVigorous'/>

        <enum-item name='BeSpirited'/>
        <enum-item name='BeDelicate'/>
        <enum-item name='BeFiery'/>
        <enum-item name='BringSenseOfMotion'/>
        <enum-item name='BeFiery2'/>
        <enum-item name='WithFeeling' since='v0.47.01'/>        
        <enum-item name='FeelAgitated'/>
        <enum-item name='BePassionate'/>
        <enum-item name='Sparkle'/>
        <enum-item name='BeBroad'/>
        <enum-item name='BeMadeSweetly'/>

        <enum-item name='BeStrong'/>
        <enum-item name='BeEnergetic'/>
        <enum-item name='BeForceful'/>
        <enum-item name='FeelHeroic'/>
        <enum-item name='BeMadeExpressively'/>
        <enum-item name='FeelFurious'/>
        <enum-item name='BeJoyful'/>
        <enum-item name='BeGrand'/>
        <enum-item name='BeMerry'/>
        <enum-item name='BeGraceful'/>

        <enum-item name='BuildAsItProceeds'/>
        <enum-item name='EvokeTears'/>
        <enum-item name='BeMelancholic'/>
        <enum-item name='FeelMournful'/>
        <enum-item name='BeMadeWithLightTouch'/>
        <enum-item name='FeelHeavy'/>
        <enum-item name='FeelMysterious'/>
        <enum-item name='BeJumpy'/>
        <enum-item name='FeelPlayful'/>
        <enum-item name='FeelTender'/>

        <enum-item name='FeelCalm'/>
        <enum-item name='BeTriumphant'/>
    </enum-type>

    <enum-type type-name='musical_form_pitch_style' base-type='int32_t'>
        <enum-item name='SinglePitchesOnly'/>
        <enum-item name='IntervalsOnly'/>
        <enum-item name='SparseChords'/>
        <enum-item name='PitchClusters'/>
        <enum-item name='ChordLayers'/>
    </enum-type>

    <bitfield-type type-name="musical_form_feature" base-type="uint32_t">
        <flag-bit name='GlideFromNoteToNote'/>
        <flag-bit name='UseGraceNotes'/>
        <flag-bit name='UseMordents'/>
        <flag-bit name='MakeTrills'/>
        <flag-bit name='PlayRapidRuns'/>
        <flag-bit name='LocallyImprovise'/>
        <flag-bit name='SpreadSyllablesOverManyNotes'/>
        <flag-bit name='MatchNotesAndSyllables'/>

        <flag-bit name='Syncopate'/>
        <flag-bit name='AddFills'/>
        <flag-bit name='AlternateTensionAndRepose'/>
        <flag-bit name='ModulateFrequently'/>
        <flag-bit name='PlayArpeggios'/>
        <flag-bit name='PlayStaccato'/>
        <flag-bit name='PlayLegato'/>
        <flag-bit name='FreelyAdjustBeats'/>
    </bitfield-type>

    <struct-type type-name='musical_form' instance-vector='$global.world.musical_forms.all' key-field='id'>
        <int32_t name='id'/>
        <compound name='name' type-name='language_name'/>
        <int32_t name="originating_entity" ref-target="historical_entity" comment="ID of the entity from which the musical form originated."/>
        <int32_t name="original_author" ref-target="historical_figure" comment="historical figure ID of the composer"/>
        <stl-vector name='scales' pointer-type='musical_form_vocals'/>
        <stl-vector name='instruments' pointer-type='musical_form_instruments'/>
        <stl-vector name='melodies' pointer-type='musical_form_melodies'/>
        <stl-vector pointer-type='musical_form_sub4'/>
        <enum name='tempo_style' base-type='int32_t' type-name='musical_form_style'/>
        <enum name='dynamic_style' base-type='int32_t' type-name='musical_form_style'/>
        <enum name='overall_style' base-type='int32_t' type-name='musical_form_style'/>
        <int32_t name='poetic_form_id' ref-target='poetic_form'/>
        <int32_t name='written_content_id' ref-target='written_content'/>
        <int32_t name='scale_id' ref-target='scale'/>
        <int32_t name='scale_subid' comment='reference to scale_sub2'/>
        <int32_t name='rhythm_id' ref-target='rhythm'/>
        <int32_t name='rhythm_subid2' comment='reference to rhythm_sub2'/>
        <int32_t name='rhythm_subid1' comment='reference to rhythm_sub1'/>
        <bitfield type-name='musical_form_feature' name='features'/>
        <enum name='pitch_style' base-type='int32_t' type-name='musical_form_pitch_style'/>
        <enum name='purpose' base-type='int32_t' type-name='musical_form_purpose'/>
        <int32_t name='devotion_target' ref-target='historical_figure'/>
        <bitfield base-type='uint32_t' name='flags'>
            <flag-bit name='produces_individual_songs'/> 'applied by composers to produce individual pieces of music' if set, otherwise 'guides musicians during improvised performances'
            <flag-bit name='repeats_as_necessary'/>
        </bitfield>
    </struct-type>

    <struct-type type-name='musical_form_vocals'>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector type-name='int32_t'/>
        <stl-vector name='vocal_components' type-name='int32_t'/> 0: melody, 1: counterpoint, 2: harmony, 3: rhythm
        <stl-vector name='phrase_lengths' type-name='int32_t'/> 0: short, 1: mid-length, 2: long, 3: varied length
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector pointer-type='musical_form_melodies'/>
        <int32_t/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='musical_form_instruments'>
        <int32_t name='instrument_subtype' ref-target='itemdef_instrumentst' comment='-1 = vocal'/>
        <bitfield base-type='uint32_t' name='substitutions'>
            <flag-bit name='singer'/>
            <flag-bit name='speaker'/>
            <flag-bit name='chanter'/>
        </bitfield>
        <bitfield type-name='musical_form_feature' name='features'/>
        <int32_t name='minimum_required' comment='tentative'/>
        <int32_t name='maximum_permitted' comment='tentative'/>
        <enum name='dynamic_style' base-type='int32_t' type-name='musical_form_style'/>
        <enum name='overall_style' base-type='int32_t' type-name='musical_form_style'/>
    </struct-type>

    <struct-type type-name='musical_form_melodies'>
        <int32_t name='style'/> 0: rising, 1: falling, 2: rising-falling, 3: falling-rising
        <int32_t name='frequency'/> 0: always, 1: often, 2: sometimes
        <stl-vector name='intervals' pointer-type='musical_form_interval'/>
        <bitfield type-name='musical_form_feature' name='features'/>
    </struct-type>

    <struct-type type-name='musical_form_sub4'>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='musical_form_interval'>
        <int32_t name='degree'/>
        <bitfield base-type='uint32_t' name='flags'>
            <flag-bit name='rising' comment='otherwise falling'/>
            <flag-bit name='flattened'/>
            <flag-bit name='sharpened'/>
        </bitfield>
    </struct-type>

    <struct-type type-name='dance_form' instance-vector='$global.world.dance_forms.all' key-field='id'>
        <int32_t name='id'/>
        <compound name='name' type-name='language_name'/>
        <int32_t name='musical_form_id'/>
        <int32_t name='music_written_content_id'  ref-target='written_content' comment='at most one of this and musical_form_id is non null'/>
        <int32_t/>
        <int32_t name="originating_entity" ref-target="historical_entity" comment="ID of the entity from which the dance form originated."/>
        <int32_t name="original_author" ref-target="historical_figure" comment="ID of the historical figure who developed the dance form."/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector type-name='int32_t'/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector pointer-type='dance_form_sub1'/>
        <stl-vector pointer-type='dance_form_sub2'/>
    </struct-type>

    <struct-type type-name='dance_form_sub1'>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector type-name='int32_t'/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='dance_form_sub2'>
        <stl-string/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='scale' instance-vector='$global.world.scales.all' key-field='id'>
        <int32_t name='id'/>
        <int32_t name='flags'/>
        <int32_t/>
        <static-array type-name='int32_t' count='25'/>
        <int32_t/>
        <stl-vector pointer-type='scale_sub1'/>
        <stl-vector pointer-type='scale_sub2'/>
        <compound name='unk1'>
            <int32_t/>
            <static-array type-name='stl-string' count='25'/>
            <static-array type-name='stl-string' count='25'/>
            <static-array type-name='int32_t' count='25'/>
            <int32_t/>
        </compound>
    </struct-type>

    <struct-type type-name='scale_sub1'>
        <stl-string/>
        <static-array type-name='int32_t' count='5'/>
        <int32_t/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='scale_sub2'>
        <int32_t/>
        <stl-string name='name'/>
        <static-array type-name='int32_t' count='7'/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='rhythm' instance-vector='$global.world.rhythms.all' key-field='id'>
        <int32_t name='id'/>
        <stl-vector pointer-type='rhythm_sub1'/>
        <stl-vector pointer-type='rhythm_sub2'/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='rhythm_sub1'>
        <stl-string name='name'/>
        <stl-vector>
            <pointer>
                <pointer type-name='int32_t' is-array='true'/>
                <int32_t name='length'/>
            </pointer>
        </stl-vector>
        <pointer type-name='stl-string'/>
        <pointer type-name='stl-string'/>
        <int32_t/>
    </struct-type>

    <struct-type type-name='rhythm_sub2'>
        <stl-string name='name'/>
        <stl-vector type-name='int32_t'/>
        <stl-vector type-name='int32_t'/>
        <int32_t/>
    </struct-type>

    <enum-type type-name='occupation_type' base-type='int32_t'>
        <enum-item name='TAVERN_KEEPER'/>
        <enum-item name='PERFORMER'/>
        <enum-item name='SCHOLAR'/>
        <enum-item name='MERCENARY'/>
        <enum-item name='MONSTER_SLAYER'/>
        <enum-item name='SCRIBE'/>
        <enum-item name='MESSENGER'/>
    </enum-type>

    <struct-type type-name='occupation' instance-vector='$global.world.occupations.all' key-field='id'>
        <int32_t name='id'/>
        <enum name='type' base-type='int32_t' type-name='occupation_type'/>
        <int32_t name='histfig_id' ref-target='historical_figure'/>
        <int32_t name='unit_id' ref-target='unit'/>
        <int32_t name='location_id' ref-target='abstract_building' aux-value='$$.site_id'/>
        <int32_t name='site_id' ref-target='world_site'/>
        <int32_t name='group_id' ref-target='historical_entity'/>
        <stl-vector pointer-type='occupation_sub1'/>
        <int32_t/>
        <int32_t init-value='-1'/>
        <pointer/>
        <pointer/>
    </struct-type>

    <struct-type type-name='occupation_sub1'>
        <int32_t/>
        <int32_t/>
        <int16_t/>
        <int16_t/>
        <int16_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
        <int32_t/>
    </struct-type>

</data-definition>

<!--
Local Variables:
indent-tabs-mode: nil
nxml-child-indent: 4
End:
-->
